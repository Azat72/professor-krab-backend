import os
import requests
from typing import List
from pydantic import BaseModel
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_URL = "https://api.deepseek.com/v1/chat/completions"
API_KEY = os.getenv("API_KEY")

class ChatMessage(BaseModel):
    user: str
    bot: str

def generate_answer(question: str, context: str, chat_history: List[ChatMessage]) -> str:
    if not API_KEY:
        return "‚ùå API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."

    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }

    messages = [
        {"role": "system", "content": "–¢—ã ‚Äî –ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –ö–†–ê–ë, —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∞–≤–∞. –û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, —á—ë—Ç–∫–æ –∏ —Å –ª—ë–≥–∫–∏–º —é–º–æ—Ä–æ–º."},
        {"role": "system", "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}"}
    ]

    for msg in chat_history:
        messages.append({"role": "user", "content": msg.user})
        messages.append({"role": "assistant", "content": msg.bot})

    messages.append({"role": "user", "content": question})

    payload = {
        "model": "deepseek-chat",
        "messages": messages,
        "stream": False
    }

    response = requests.post(API_URL, headers=headers, json=payload)
    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"]
    else:
        return f"–û—à–∏–±–∫–∞: {response.status_code} - {response.text}\nüìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á: {API_KEY[:6]}..."
